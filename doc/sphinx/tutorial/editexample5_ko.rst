메트릭, 간격 및 커닝
============================


메트릭 검사 및 제어
---------------------------------

.. image:: /images/sidebearings.png
   :align: right

글리프의 모양을 만든 후에는 글리프 사이의 간격을 파악해야 합니다. 두 글리프 사이의 공간에는 두 가지 구성 요소가 있습니다. 첫 번째 글리프 뒤의 공간과 두 번째 글리프 앞의 공간입니다. 왼쪽에서 오른쪽으로 쓰는 세계에서는 이 두 가지를 각각 오른쪽 사이드 베어링과 왼쪽 사이드 베어링이라고 합니다.

왼쪽 사이드 베어링은 :menuselection:`편집 --> 모두 선택`(윤곽선 보기에서)을 간단하게 실행한 다음 선택한 개체를 적절한 위치로 드래그하여 변경할 수 있습니다. 오른쪽 사이드 베어링은 전진 폭 선을 선택하고 적절하게 조정하여 변경할 수 있습니다.

그러나 일반적으로 단일 글리프의 메트릭을 단독으로 설정하는 것보다 다른 글리프의 컨텍스트에서 글리프를 보고 해당 관점에서 설정하는 것이 좋습니다. :menuselection:`창 --> :doc:`메트릭 창 </ui/mainviews/metricsview>` 열기` 명령을 사용합니다.

.. image:: /images/MetricsView.png

메트릭 보기를 호출할 때 글꼴 보기에서 선택한 모든 글리프가 메트릭 보기에 표시됩니다. 보기 상단의 텍스트 필드에 새 글리프를 입력하거나 글꼴 보기에서 글리프를 드래그하여 표시되는 글리프를 변경할 수 있습니다.

여기에서 아래 텍스트 필드에 입력하여 모든 글리프의 메트릭을 조정하거나 글리프를 선택(이미지를 클릭)하고 주위로 드래그(왼쪽 사이드 베어링 조정)하거나 너비 선을 드래그(오른쪽 사이드 베어링 조정)할 수 있습니다.

"타자기" 스타일 글꼴(모든 글리프의 너비가 동일함)을 생성하려면 글꼴 보기에서 :menuselection:`편집 --> 모두 선택`을 실행한 다음 :menuselection:`메트릭 --> 너비 설정`을 실행합니다. 이렇게 하면 모든 글리프의 너비가 동일한 값으로 설정됩니다. 그런 다음 각 글리프의 왼쪽 및 오른쪽 간격을 균등하게 하려면 :menuselection:`메트릭 --> 너비에서 가운데 정렬`을 실행할 수도 있습니다.

.. image:: /images/autowidth.png
   :align: right

이 모든 수동 작업이 너무 복잡해 보이면 :ref:`메트릭->자동 너비 <autowidth.AutoWidth>`를 시도해 보십시오. 이렇게 하면 글리프에 너비가 자동으로 할당됩니다. 이러한 너비는 전문적인 표준에 미치지 못하지만 일반적으로 합리적인 근사치입니다.

.. container:: clearer

   ..


수직 메트릭
^^^^^^^^^^^^^^^^

FontForge는 CJK 글꼴에 필요한 수직 메트릭을 일부 지원합니다. 먼저 이 글꼴에 수직 메트릭이 포함되어야 한다고 FontForge에 알려야 합니다. 이렇게 하려면 :menuselection:`요소 --> 글꼴 정보 --> 일반 --> 수직 메트릭 있음`을 사용합니다. 그런 다음 각 윤곽선 글리프에서 레이어 팔레트에서 VMetrics를 활성화합니다.

이제 글리프 아래 어딘가에 수직 전진 선이 표시됩니다. 가로 전진(너비) 선을 드래그하는 것처럼 이 선을 드래그할 수 있습니다.


글꼴의 기준선에서 기준선까지의 간격 설정.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

이 중요한 양을 설정하는 쉬운 방법이 있을 것이라고 상상할 수 있습니다. 불행히도 그렇지 않습니다.

.. object:: PostScript Type1 글꼴(또는 베어 CFF 글꼴)에서

   이 값을 설정할 방법이 없습니다.

   전혀, 절대로.

   전통적인 타이포그래피에서 줄 간격은 1em입니다(FontForge에서는 글꼴의 어센트+디센트임). 일부 응용 프로그램은 이것을 사용합니다. 다른 응용 프로그램은 글꼴의 경계 상자를 사용합니다(최대 어센더 높이와 최소 디센더 깊이를 합산) -- 매우 나쁘지만 매우 일반적인 접근 방식입니다.

.. object:: TrueType 또는 OpenType 글꼴에서

   불행히도 이것은 플랫폼에 따라 다릅니다.

   .. object:: Mac

      Mac에서는 기준선에서 기준선까지의 간격이 글꼴의 경계 상자 값으로 다시 결정되며, 이는 'hhea' 테이블에 지정되어 있으며 줄 간격으로 수정될 수 있습니다(FontForge에서 :doc:`요소->글꼴 정보->OS/2 </ui/dialogs/fontinfo>`로 설정할 수 있음).

   .. object:: Windows에서

      OpenType 사양에 따르면 기준선에서 기준선까지의 거리는 'OS/2' 테이블의 타이포그래피 어센트 및 디센트 값으로 설정됩니다. 이것들은 :doc:`요소->글꼴 정보->OS/2 </ui/dialogs/fontinfo>`로 설정할 수 있지만 일반적으로 FontForge의 어센트 및 디센트 값으로 기본 설정되며 일반적으로 1em에 합산되고 전통적인 무연 기본값과 동일합니다.

      다시 말하지만 이것은 줄 간격 필드로 수정될 수 있습니다.

      불행히도 Windows 프로그램은 표준을 거의 따르지 않으며(아무도 놀라지 않을 것이라고 생각합니다), 일반적으로 'OS/2' 테이블의 Win 어센트/디센트 필드에 지정된 글꼴의 경계 상자를 사용합니다.

   .. object:: linux/unix에서

      표준 동작이 있는지 의심스럽습니다. Unix 앱은 아마도 위의 방법 중 하나를 선택할 것입니다.

타이포그래피적으로 유능한 응용 프로그램은 사용자가 기준선에서 기준선까지의 간격을 조정할 수 있도록 하므로 기본값이 그다지 관련이 없을 수 있습니다.


커닝
-------

왼쪽 및 오른쪽 사이드 베어링을 신중하게 설정하면 거의 모든 경우에 간격이 멋지게 보이도록 글꼴을 디자인할 수 있습니다. 그러나 간단한 해결책을 혼란스럽게 하는 몇 가지 경우가 항상 있습니다.

"``To``" 또는 "``Av``"를 고려하십시오. 여기서 표준 선택은 부적절합니다. "``o``"는 왼쪽으로 더 미끄러져 "``T``"의 상단 막대 아래에 꼭 맞으면 더 보기 좋을 것입니다. 이것을 커닝이라고 하며, 쌍별로 글리프 간 간격을 제어하는 데 사용됩니다.

.. rubric:: 커닝 비교

.. flex-grid::
   :class: flex-center

   * :flex-widths: 0 0

     - .. image:: /images/To-unkerned.png
     - .. image:: /images/To-kerned.png

.. image:: /images/addlookup-kern.png
   :align: right

위 예에서 왼쪽 이미지는 커닝되지 않은 텍스트를, 오른쪽 이미지는 커닝된 텍스트를 보여줍니다. 메트릭 창에서 커닝 쌍을 만들려면 쌍의 오른쪽 글리프를 클릭하기만 하면 됩니다. 그러면 두 글리프 사이의 선(일반적으로 수평 전진)이 녹색으로 바뀌고(커닝된 전진이 됨) 간격이 보기 좋을 때까지 이 선을 드래그합니다.

슬프게도 그 진술은 단순화입니다... 커닝 쌍을 만들기 전에 커닝 조회를 만들어야 합니다(:ref:`조회에 대한 섹션 <editexample4.lookups>` 참조). 다시 :menuselection:`요소 --> 글꼴 정보 --> 조회` 창을 열고 이번에는 창 상단의 GPOS(글리프 위치 지정) 탭을 선택해야 합니다. 다시 ``[조회 추가]`` 버튼을 누릅니다. 이번에는 조회 유형이 "쌍별 위치 지정"이고 기능은 "kern"(또는 수직 커닝을 하려면 "vkrn")입니다.

조회를 만든 후에는 다시 선택하고 [하위 테이블 추가] 버튼을 누릅니다(하위 테이블 이름을 지정하라는 메시지가 표시됨). 그런 다음 FontForge에서 커닝 쌍 또는 커닝 클래스의 하위 테이블을 원하는지 묻습니다.

유사한 커닝 기능이 있는 글리프가 많은 경우 :ref:`커닝 클래스 <metricsview.kernclass>` 세트를 만들 수 있습니다(A, À, Á, Â, Â, Ã 및 Ä가 모두 비슷하게 커닝된다고 말할 수 있음). 그러나 이 예에서는 커닝 쌍 하위 테이블이 필요합니다.

.. image:: /images/subtable-to.png
   :align: left

그런 다음 FontForge에서 커닝 하위 테이블을 직접 설정할 수 있는 대화 상자가 나타납니다. 여기에서 커닝 쌍을 설정할 수 있지만, 더 많은 글리프를 볼 수 있으므로 글꼴의 "색상"을 더 잘 느낄 수 있기 때문에 저는 메트릭 보기를 선호합니다.

(일부 글리프 조합은 문자를 커닝하는 것보다 :ref:`합자를 만드는 <editexample4.ligature>` 것이 더 좋습니다.)

.. container:: clearer

   ..


수직 커닝
^^^^^^^^^^^^^^^^

FontForge는 수직 커닝에 대한 동등한 지원을 제공합니다. 트루타입, 오픈타입 및 svg 글꼴에서 수직 커닝 정보를 읽고 쓸 수 있습니다. 수직 커닝 클래스를 만들 수 있습니다. 메트릭 창에는 수직 커닝 쌍을 설정할 수 있는 수직 모드가 있습니다. 마지막으로 수평 커닝 정보를 수직으로 회전된 글리프에 복사하는 명령이 있습니다(즉, 조합 "A" "V"가 -200으로 수평으로 커닝되면 "A.vert" "V.vert"는 -200으로 수직으로 커닝되어야 함).

(수직 커닝은 글꼴에 수직 메트릭이 있는 경우에만 사용할 수 있습니다.)
